---
const features = [
  {
    title: "Streamline Customer Conversations",
    description: "Unify all customer communications in one powerful inbox. Handle emails, chat, social media, and more from a single interface.",
    image: "https://placehold.co/1920x1080",
    alt: "Unified Inbox Interface"
  },
  {
    title: "Real-Time Omnichannel Analytics",
    description: "Get actionable insights across all channels. Track response times, customer satisfaction, and team performance in real-time.",
    image: "https://placehold.co/1920x1080",
    alt: "Analytics Dashboard"
  },
  {
    title: "Automation at Scale",
    description: "Automate routine tasks and responses while maintaining a personal touch. Save time and improve consistency across all channels.",
    image: "https://placehold.co/1920x1080",
    alt: "Automation Workflow"
  }
];
---
<section class="relative h-screen overflow-hidden bg-gray-900">
  <div class="absolute inset-0 z-10 bg-black/50"></div>
  
  <div class="relative z-20 h-full">
    <div id="feature-slider" class="h-full">
      <div class="flex h-full transition-transform duration-700 ease-in-out">
        {features.map((feature) => (
          <div class="w-full h-full flex-shrink-0">
            <div class="relative h-full">
              <img 
                src={feature.image} 
                alt={feature.alt}
                class="absolute inset-0 w-full h-full object-cover"
                loading="lazy"
              />
              <div class="absolute inset-0 flex items-center justify-center">
                <div class="max-w-4xl mx-auto text-center px-4">
                  <h2 class="text-4xl md:text-6xl font-bold text-white mb-6 [text-shadow:_0_1px_12px_rgb(0_0_0_/_40%)]">
                    {feature.title}
                  </h2>
                  <p class="text-xl md:text-2xl text-white/90 [text-shadow:_0_1px_8px_rgb(0_0_0_/_40%)]">
                    {feature.description}
                  </p>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <div class="absolute bottom-8 left-1/2 -translate-x-1/2 z-30 flex space-x-3">
    {features.map((_, index) => (
      <button
        class="w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-colors slider-dot"
        data-index={index}
        aria-label={`Go to slide ${index + 1}`}
      ></button>
    ))}
  </div>

  <button 
    class="absolute left-4 top-1/2 -translate-y-1/2 z-30 p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors text-white"
    id="prev-slide"
    aria-label="Previous slide"
  >
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
    </svg>
  </button>

  <button 
    class="absolute right-4 top-1/2 -translate-y-1/2 z-30 p-2 rounded-full bg-white/10 hover:bg-white/20 transition-colors text-white"
    id="next-slide"
    aria-label="Next slide"
  >
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
      <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
    </svg>
  </button>
</section>

<script>
const slider = document.querySelector('#feature-slider > div') as HTMLElement;
const dots = document.querySelectorAll('.slider-dot');
const prevButton = document.getElementById('prev-slide');
const nextButton = document.getElementById('next-slide');
let currentSlide = 0;
const totalSlides = dots.length;

function updateSlider(index: number) {
  // Handle infinite loop
  if (index < 0) index = totalSlides - 1;
  if (index >= totalSlides) index = 0;
  
  currentSlide = index;
  slider.style.transform = `translateX(-${index * 100}%)`;
  
  // Update dots
  dots.forEach((dot, i) => {
    dot.classList.toggle('bg-white', i === index);
    dot.classList.toggle('bg-white/50', i !== index);
  });
}

// Event listeners
dots.forEach((dot, index) => {
  dot.addEventListener('click', () => updateSlider(index));
});

prevButton?.addEventListener('click', () => updateSlider(currentSlide - 1));
nextButton?.addEventListener('click', () => updateSlider(currentSlide + 1));

// Auto-advance slides
let slideInterval = setInterval(() => {
  updateSlider(currentSlide + 1);
}, 5000);

// Reset interval on manual navigation
function resetInterval() {
  clearInterval(slideInterval);
  slideInterval = setInterval(() => {
    updateSlider(currentSlide + 1);
  }, 5000);
}

[prevButton, nextButton, ...dots].forEach(el => {
  el?.addEventListener('click', resetInterval);
});

// Initialize first slide
updateSlider(0);
</script>